# HG changeset patch
# Parent 739f1ea1a1c0e86c579d6ada147bf2a745c21e88
# User Joe Walker <jwalker@mozilla.com>
Bug 671406 - Create a list of commands that could be useful in GCLI embedded in firefox

diff --git a/browser/devtools/webconsole/GcliCommands.jsm b/browser/devtools/webconsole/GcliCommands.jsm
--- a/browser/devtools/webconsole/GcliCommands.jsm
+++ b/browser/devtools/webconsole/GcliCommands.jsm
@@ -48,6 +48,20 @@ let stringBundle = Services.strings.crea
 let gcli = gcli._internal.require("gcli/index");
 let canon = gcli._internal.require("gcli/canon");
 
+let util = gcli._internal.require("gcli/util");
+let dom = gcli._internal.require("gcli/util").dom;
+
+let Argument = gcli._internal.require("gcli/argument").Argument;
+
+let types = gcli._internal.require("gcli/types");
+let Conversion = gcli._internal.require("gcli/types").Conversion;
+let Type = gcli._internal.require("gcli/types").Type;
+let Status = gcli._internal.require("gcli/types").Status;
+let SelectionType = gcli._internal.require("gcli/types/basic").SelectionType;
+
+let field = gcli._internal.require("gcli/ui/field");
+let Field = gcli._internal.require("gcli/ui/field").Field;
+
 
 let document;
 
@@ -104,6 +118,135 @@ function lookupFormat(aName, aSwaps)
 
 
 /**
+ * Utility to create a link to a bug number
+ */
+function getBugLink(bugid)
+{
+  return '<br/>To comment on this command, use <a target="_blank" ' +
+      'href="https://bugzilla.mozilla.org/show_bug.cgi?id=' + bugid + '">' +
+      "bug " + bugid + "</a>.";
+}
+
+
+/**
+ * A type for the resources in the current page
+ */
+function ResourceType(typeSpec)
+{
+  if (typeSpec != null) {
+    throw new Error("ResourceType can not be customized");
+  }
+}
+
+ResourceType.prototype = Object.create(SelectionType.prototype);
+
+ResourceType.prototype.lookup = function()
+{
+  let reply = [];
+  let sheets = Array.prototype.slice.call(document.styleSheets);
+  for (let i = 0; i < sheets.length; i++) {
+    let sheet = sheets[i];
+    // When we're in chrome, replace style#i with style#Ln where n is the line
+    // number of the style element in the HTML document.
+    reply.push({
+      name: sheet.href || "style#" + i,
+      value: sheet
+    });
+  }
+  reply.push({
+    name: "page",
+    value: document
+  });
+  // There are other page resources that we need to include here too
+  return reply;
+};
+
+ResourceType.prototype.name = "resource";
+
+types.registerType(ResourceType);
+
+
+/**
+ * 'file' allows upload of a file
+ */
+function FileType(typeSpec)
+{
+  if (typeSpec != null) {
+    throw new Error("FileType can not be customized");
+  }
+}
+
+FileType.prototype = Object.create(Type.prototype);
+
+FileType.prototype.stringify = function(value)
+{
+  if (value == null) {
+    return "";
+  }
+  return value.toString();
+};
+
+FileType.prototype.parse = function(arg)
+{
+  if (arg.text == null || arg.text === "") {
+    return new Conversion(null, arg, Status.INCOMPLETE, "");
+  }
+  return new Conversion(arg.text, arg);
+};
+
+FileType.prototype.name = "file";
+
+types.registerType(FileType);
+
+
+/**
+ * A field that allows editing of strings
+ */
+function FileField(type, options)
+{
+  this.doc = options.document;
+  this.type = type;
+  this.arg = new Argument();
+
+  this.element = dom.createElement(this.doc, "input");
+  this.element.type = "file";
+
+  this.onInputChange = this.onInputChange.bind(this);
+  this.element.addEventListener("keyup", this.onInputChange, false);
+
+  this.fieldChanged = util.createEvent("FileField.fieldChanged");
+}
+
+FileField.prototype = Object.create(Field.prototype);
+
+FileField.prototype.destroy = function()
+{
+  this.element.removeEventListener("keyup", this.onKeyup, false);
+};
+
+FileField.prototype.setConversion = function(conversion)
+{
+  this.arg = conversion.arg;
+  this.element.value = conversion.arg.text;
+  this.setMessage(conversion.message);
+};
+
+FileField.prototype.getConversion = function()
+{
+  // This tweaks the prefix/suffix of the argument to fit
+  this.arg = this.arg.beget(this.element.value, { prefixSpace: true });
+  return this.type.parse(this.arg);
+};
+
+FileField.claim = function(type)
+{
+  return type instanceof FileType ? Field.MATCH : Field.IF_NOTHING_BETTER;
+};
+
+field.addField(FileField);
+
+
+/**
  * 'echo' command
  */
 gcli.addCommand({
@@ -154,3 +297,556 @@ gcli.addCommand({
   }
 });
 
+
+/**
+ * 'version' command
+ */
+gcli.addCommand({
+  name: "version",
+  description: "Show current FF version number",
+  returnType: "string",
+  exec: function(args, env) {
+    return "You are running Firefox version 9.0a1 (2011-08-18)";
+  }
+});
+
+
+/**
+ * 'edit' command
+ */
+gcli.addCommand({
+  name: "edit",
+  description: lookup("editDesc"),
+  manual: lookup("editManual"),
+  params: [
+     {
+       name: "resource",
+       type: "resource",
+       description: lookup("editResourceDesc")
+     }
+   ],
+   returnType: "html",
+   exec: function(args, context) {
+     let element = args.resource.documentElement || args.resource.ownerNode;
+     return '<textarea rows=5 cols=80 style="font-family:monospace">' +
+         lookup("editPretend") + ":\n" +
+         element.innerHTML.substring(0, 500) + "...</textarea>" +
+         getBugLink(683499);
+   }
+});
+
+
+/**
+ * 'stylizer' command
+ */
+gcli.addCommand({
+  name: "stylizer",
+  description: lookup("stylizerDesc"),
+  manual: lookup("stylizerManual"),
+  params: [
+     {
+       name: "node",
+       type: "node",
+       description: lookup("stylizerNodeDesc"),
+     }
+   ],
+   returnType: "html",
+   exec: function(args, context) {
+     return lookupFormat("stylizerReply", [ "" + args.node ]) +
+         getBugLink(683502);
+   }
+});
+
+
+/**
+ * 'inspect' command for GCLI
+ */
+if (Services.prefs.getBoolPref("devtools.styleinspector.enabled")) {
+  gcli.addCommand({
+    name: "inspect",
+    description: lookup("inspect.desc"),
+    manual: lookup("inspect.manual"),
+    params: [
+      {
+        name: "node",
+        type: "node",
+        description: lookup("inspect.paramNodeDesc")
+      }
+    ],
+    returnType: "html",
+    exec: function(args, context) {
+      let errstr = null;
+
+      if (!(args.node.style instanceof Ci.nsIDOMCSSStyleDeclaration)) {
+        throw new Error(lookup("inspect.nodeHasNoStyleProps"));
+      }
+
+      let stylePanel = StyleInspector.createPanel();
+      stylePanel.setAttribute("hudToolId", context.environment.hudId);
+      stylePanel.selectNode(args.node, true);
+    }
+  });
+}
+
+
+let breakpoints = [];
+
+/**
+ * 'break' command
+ */
+gcli.addCommand({
+  name: "break",
+  description: lookup("breakDesc"),
+  manual: lookup("breakManual")
+});
+
+
+/**
+ * 'break list' command
+ */
+gcli.addCommand({
+  name: "break list",
+  description: lookup("breaklistDesc"),
+  returnType: "html",
+  exec: function(args, context) {
+    if (breakpoints.length === 0) {
+      return lookup("breaklistNone") + getBugLink(683503);
+    }
+
+    let reply = lookup("breaklistIntro");
+    reply += "<ol>";
+    breakpoints.forEach(function(breakpoint) {
+      reply += "<li>" + JSON.stringify(breakpoint) + "</li>";
+    });
+    reply += "</ol>";
+    return reply + getBugLink(683503);
+  }
+});
+
+
+/**
+ * 'break add' command
+ */
+gcli.addCommand({
+  name: "break add",
+  description: lookup("breakaddDesc"),
+  manual: lookup("breakaddManual")
+});
+
+
+/**
+ * 'break add line' command
+ */
+gcli.addCommand({
+  name: "break add line",
+  description: lookup("breakaddlineDesc"),
+  params: [
+    {
+      name: "file",
+      type: "string",
+      description: lookup("breakaddlineFileDesc")
+    },
+    {
+      name: "line",
+      type: { name: "number", min: 0, step: 10 },
+      description: lookup("breakaddlineLineDesc")
+    },
+    {
+      group: "Options",
+      params: [
+        {
+         name: "if",
+         type: "string",
+         description: lookup("breakaddIfDesc"),
+         defaultValue: null
+        },
+      ]
+    }
+  ],
+  returnType: "html",
+  exec: function(args, context) {
+    args.type = "line";
+    breakpoints.push(args);
+    return lookup("breakaddAdded") + getBugLink(683503);
+  }
+});
+
+
+/**
+ * 'break add function' command
+ */
+gcli.addCommand({
+  name: "break add function",
+  description: lookup("breakaddfuncDesc"),
+  params: [
+    {
+      name: "function",
+      type: "javascript",
+      description: lookup("breakaddfuncFunctionDesc")
+    }
+  ],
+  returnType: "html",
+  exec: function(args, context) {
+    args.type = "function";
+    breakpoints.push(args);
+    return lookup("breakaddAdded") + getBugLink(683503);
+  }
+});
+
+
+/**
+ * 'break add xhr' command
+ */
+gcli.addCommand({
+  name: "break add xhr",
+  description: lookup("breakaddxhrDesc"),
+  returnType: "html",
+  exec: function(args, context) {
+    args.type = "xhr";
+    breakpoints.push(args);
+    return lookup("breakaddAdded") + getBugLink(683503);
+  }
+});
+
+
+/**
+ * 'break add event' command
+ */
+gcli.addCommand({
+  name: "break add event",
+  description: lookup("breakaddeventDesc"),
+  params: [
+    {
+      name: "event",
+      type: {
+        name: "selection",
+        data: [
+          "click", "dblclick", "mousedown", "mouseup", "mouseover", "mousemove",
+          "mouseout", "keydown", "keypress", "keyup", "load", "unload", "abort",
+          "error", "resize", "scroll", "select", "change", "submit", "reset",
+          "focus", "blur", "DOMFocusIn", "DOMFocusOut", "DOMActivate",
+          "DOMSubtreeModified", "DOMNodeInserted", "DOMNodeRemoved",
+          "DOMNodeRemovedFromDocument", "DOMNodeInsertedIntoDocument",
+          "DOMAttrModified", "DOMCharacterDataModified",
+          "touchstart", "touchend", "touchenter", "touchleave", "touchmove",
+          "touchcancel"
+        ]
+      },
+      description: lookup("breakaddeventEventDesc")
+    },
+    {
+      name: "node",
+      type: "node",
+      description: lookup("breakaddeventNodeDesc")
+    },
+  ],
+  returnType: "html",
+  exec: function(args, context) {
+    args.type = "event";
+    args.node = args.node.__gcliQuery;
+    breakpoints.push(args);
+    return lookup("breakaddAdded") + getBugLink(683503);
+  }
+});
+
+
+/**
+ * 'break next' command
+ */
+gcli.addCommand({
+  name: "break next",
+  description: lookup("breaknextDesc"),
+  returnType: "html",
+  exec: function(args, context) {
+    return lookup("breaknextReply") + getBugLink(683503);
+  }
+});
+
+
+/**
+ * 'break del' command
+ */
+gcli.addCommand({
+  name: "break del",
+  description: lookup("breakdelDesc"),
+  params: [
+    {
+      name: "breakid",
+      type: {
+        name: "number",
+        min: 0,
+        max: function() { return breakpoints.length - 1; }
+      },
+      description: lookup("breakdelBreakidDesc")
+    }
+  ],
+  returnType: "html",
+  exec: function(args, context) {
+    breakpoints.splice(args.breakid, 1);
+    return lookup("breakdelRemoved") + getBugLink(683503);
+  }
+});
+
+
+/**
+ * 'step' command
+ */
+gcli.addCommand({
+  name: "step",
+  description: lookup("stepDesc"),
+  manual: lookup("stepManual")
+});
+
+
+/**
+ * 'step up' command
+ */
+gcli.addCommand({
+  name: "step up",
+  description: lookup("stepupDesc"),
+  manual: lookup("stepupManual"),
+  returnType: "html",
+  exec: function(args, context) {
+    return lookup("stepInsult") + getBugLink(683505);
+  }
+});
+
+
+/**
+ * 'step in' command
+ */
+gcli.addCommand({
+  name: "step in",
+  description: lookup("stepinDesc"),
+  manual: lookup("stepinManual"),
+  returnType: "html",
+  exec: function(args, context) {
+    return lookup("stepInsult") + getBugLink(683505);
+  }
+});
+
+
+/**
+ * 'step next' command
+ */
+gcli.addCommand({
+  name: "step next",
+  description: lookup("stepnextDesc"),
+  manual: lookup("stepnextManual"),
+  returnType: "html",
+  exec: function(args, context) {
+    return lookup("stepInsult") + getBugLink(683505);
+  }
+});
+
+
+/**
+ * 'step on' command
+ */
+gcli.addCommand({
+  name: "step on",
+  description: lookup("steponDesc"),
+  manual: lookup("steponManual"),
+  returnType: "html",
+  exec: function(args, context) {
+    return lookup("stepInsult") + getBugLink(683505);
+  }
+});
+
+
+/**
+ * 'step to' command
+ */
+gcli.addCommand({
+  name: "step to",
+  description: lookup("steptoDesc"),
+  manual: lookup("steptoManual"),
+  params: [
+    {
+      name: "line",
+      type: { name: "number", min: 0, step: 10 },
+      description: lookup("steptoLineDesc")
+    }
+  ],
+  returnType: "html",
+  exec: function(args, context) {
+    return lookup("stepInsult") + getBugLink(683505);
+  }
+});
+
+
+/**
+ * 'highlight' command
+ */
+gcli.addCommand({
+  name: "highlight",
+  description: lookup("highlightDesc"),
+  manual: lookup("highlightManual"),
+  params: [
+     {
+       name: "node",
+       type: "node",
+       description: lookup("highlightNodeDesc")
+     }
+   ],
+   returnType: "html",
+   exec: function(args, context) {
+     return lookupFormat("highlightReply", [ "" + args.node ]) +
+         getBugLink(683506);
+   }
+});
+
+
+/**
+ * 'doctor' command
+ */
+gcli.addCommand({
+  name: "doctor",
+  description: lookup("doctorDesc"),
+  manual: lookup("doctorManual"),
+  params: [
+     {
+       name: "node",
+       type: "node",
+       description: lookup("doctorNodeDesc")
+     }
+   ],
+   returnType: "html",
+   exec: function(args, context) {
+     return lookupFormat("doctorReply", [ "" + args.node ]) +
+         getBugLink(683509);
+   }
+});
+
+
+/**
+ * 'console' command
+ */
+gcli.addCommand({
+  name: "console",
+  description: lookup("consoleDesc"),
+  manual: lookup("consoleManual")
+});
+
+
+/**
+ * 'console clear' command
+ */
+gcli.addCommand({
+  name: "console clear",
+  description: lookup("consoleclearDesc"),
+  returnType: "html",
+  exec: function(args, context) {
+    return lookup("consoleclearReply") + getBugLink(683510);
+  }
+});
+
+
+/**
+ * 'console close' command
+ */
+gcli.addCommand({
+  name: "console close",
+  description: lookup("consolecloseDesc"),
+  returnType: "html",
+  exec: function(args, context) {
+    return lookup("consolecloseReply") + getBugLink(683510);
+  }
+});
+
+
+/**
+ * 'console filter' command
+ */
+gcli.addCommand({
+  name: "console filter",
+  description: lookup("consolefilterDesc"),
+  params: [
+    {
+      name: "category",
+      type: {
+        name: "selection",
+        data: [ "net", "css", "js", "page" ]
+      },
+      description: lookup("consolefilterCategoryDesc")
+    },
+    {
+      name: "level",
+      type: {
+        name: "selection",
+        data: [ "error", "warning", "log", "debug" ]
+      },
+      description: lookup("consolefilterLevelDesc")
+    },
+    {
+      name: "display",
+      type: {
+        name: "selection",
+        data: [ "show", "hide" ]
+      },
+      description: lookup("consolefilterDisplayDesc")
+    },
+  ],
+  returnType: "html",
+  exec: function(args, context) {
+    return lookup("consolefilterReply") + getBugLink(683510);
+  }
+});
+
+
+/**
+ * 'scratchpad' command
+ */
+gcli.addCommand({
+  name: "scratchpad",
+  description: lookup("scratchpadDesc"),
+  params: [
+    {
+      name: "script",
+      type: "string",
+      description: lookup("scratchpadScriptDesc"),
+      defaultValue: null
+    },
+    {
+      group: "Options",
+      params: [
+        /*
+        {
+          name: "file",
+          type: "file",
+          description: lookup("scratchpadFileDesc"),
+          defaultValue: null
+        },
+        */
+        {
+          name: "chrome",
+          type: "boolean",
+          description: lookup("scratchpadChromeDesc")
+        }
+      ]
+    }
+  ],
+  returnType: "html",
+  exec: function(args, context) {
+    // See Bug 659268 - we shouldn't need to do this
+    if (args.file && args.script) {
+      throw new Error(lookup("scratchpadOnesource"));
+    }
+    if (args.file) {
+      return '<textarea rows=5 cols=80 style="font-family:monospace">' +
+          lookupFormat("scratchpadFilepretend", [ args.file ]) +
+          "</textarea>" +
+          getBugLink(683513);
+    }
+    if (args.script) {
+      return '<textarea rows=5 cols=80 style="font-family:monospace">' +
+          lookup("scratchpadScriptpretend") +
+          ":\n" + args.script + "</textarea>" +
+          getBugLink(683513);
+    }
+    return '<textarea rows=5 cols=80 style="font-family:monospace">' +
+        lookup("scratchpadEmptypretend") + "</textarea>" +
+        getBugLink(683513);
+  }
+});
+
diff --git a/browser/locales/en-US/chrome/browser/gcli.properties b/browser/locales/en-US/chrome/browser/gcli.properties
--- a/browser/locales/en-US/chrome/browser/gcli.properties
+++ b/browser/locales/en-US/chrome/browser/gcli.properties
@@ -15,3 +15,118 @@ typesSelectionNomatch=Can\'t use \'%S\'.
 
 echoDesc=Show a message
 echoMessageDesc=Message
+
+nodeParseSyntax=Syntax error in CSS query
+nodeParseMultiple=Too many matches (%S)
+nodeParseNone=No matches
+
+editDesc=Tweak a page resource
+editManual=Edit one of the resources that is part of this page (or maybe any generic web resource?)
+editResourceDesc=URL to edit
+editPretend=Pretend this is an popup editor containing
+
+stylizerDesc=Edit CSS for a node
+stylizerManual=Find the CSS rules that affect a node so we can edit them together
+stylizerNodeDesc=Node to edit (by CSS expression)
+stylizerReply=This is where we open a window to edit the styles for: %S.
+
+breakDesc=Manage breakpoints
+breakManual=Commands to list, add and remove breakpoints
+
+breaklistDesc=Display known breakpoints
+breaklistNone=No breakpoints set
+breaklistIntro=The following breakpoints are set:
+
+breakaddIfDesc=Break condition
+breakaddAdded=Added breakpoint
+breakaddDesc=Add a breakpoint
+breakaddManual=Breakpoint types supported: line, function, xhr, event
+
+breakaddlineDesc=Add a line breakpoint
+breakaddlineFileDesc=JS file
+breakaddlineLineDesc=Line number
+breakaddfuncDesc=Add a function breakpoint
+breakaddfuncFunctionDesc=Function
+breakaddxhrDesc=Add an XHR breakpoint
+breakaddeventDesc=Add an event breakpoint
+breakaddeventEventDesc=Event type
+breakaddeventNodeDesc=Node
+
+breaknextDesc=Break at next line
+breaknextReply=Breaking at next line
+
+breakdelDesc=Remove a breakpoint
+breakdelBreakidDesc=Index of breakpoint
+breakdelRemoved=Breakpoint removed
+
+stepDesc=Move the debugger on
+stepManual=When the debugger is stopped, move it to a new place
+stepInsult=The debugger is not stopped. How do you expect to start it? Duh!
+
+stepupDesc=Step out of the current function
+stepupManual=Move the debug position up one stack frame by running to the end of the current function
+
+stepinDesc=Step into the current function
+stepinManual=Move the debug position down one stack frame into the current function call
+
+stepnextDesc=Step to the next line
+stepnextManual=Move the debug position to the start of the next line
+
+steponDesc=Continue running
+steponManual=Resume the debugger running normally
+
+steptoDesc=Run to the given line
+steptoManual=Move the debug position to the start of the specified line
+steptoLineDesc=Line to run to
+
+highlightDesc=Highlight a node
+highlightManual=Examine the dimensions and essential properties of a node (by CSS query)
+highlightNodeDesc=CSS query
+highlightReply=Pretend the highlighter thing is doing its stuff now.
+
+doctorDesc=Open CSS Doctor for a node
+doctorManual=Diagnose why a CSS rule isn\'t working for an element
+doctorNodeDesc=CSS query
+doctorReply=Pretend the CSS Doctor is doing its stuff now.
+
+consoleDesc=Commands to control the console
+consoleManual=Filter, clear and close the web console
+
+consoleclearDesc=Clear the console
+consoleclearReply=I\'m sorry, Dave, I can\'t let you do that
+
+consolecloseDesc=Close the console
+consolecloseReply=A closed console is like a closed mind which is like a closed book which is bad.
+
+consolefilterDesc=Filter displayed events
+consolefilterCategoryDesc=Category
+consolefilterLevelDesc=Level
+consolefilterDisplayDesc=Show|Hide
+consolefilterReply=This needs implementing
+
+scratchpadDesc=Open a scratchpad
+scratchpadManual=Scratchpad allows editing JavaScript in a smalltalk-like environment
+scratchpadFileDesc=Initial file
+scratchpadScriptDesc=Initial script
+scratchpadChromeDesc=Chrome privilages
+scratchpadOnesource=Only one of --file and --script should be used
+scratchpadFilepretend=Pretend this is a scratchpad with the contents of %S
+scratchpadScriptpretend=Pretend this is a scratchpad containing this text
+scratchpadEmptypretend=Pretend this is an empty scratchpad
+
+# LOCALIZATION NOTE (inspect.desc): A short (i.e less than 30 chars) description
+# of what the command does. A fuller description is supplied in command.manual
+inspect.desc=Inspect the CSS for a node
+
+# LOCALIZATION NOTE (inspect.manual): A full description of the 'inspect'
+# command. This should be left blank if the short description (in command.desc)
+# can't be reasonably expanded upon
+inspect.manual=Examine the detail of the CSS properties for a node
+
+# LOCALIZATION NOTE (inspect.paramNodeDesc): A short (i.e. less than 20 chars)
+# description for use in a dialog for the 'inspect' command
+inspect.paramNodeDesc=CSS query
+
+# LOCALIZATION NOTE (inspect.nodeHasNoStyleProps): This message is returned
+# when an unstyleable object is passed in to 'inspect'
+inspect.nodeHasNoStyleProps=Object cannot be styled
